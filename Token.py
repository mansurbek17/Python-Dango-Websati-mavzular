# üîë Token haqida to‚Äòliq ma‚Äôlumot (Django REST Framework misolida)
# 1Ô∏è‚É£ Token nima?
#
# Token ‚Äì bu maxfiy raqamli kalit (string), foydalanuvchini aniqlash (authentication) va unga ruxsat berish (authorization) uchun ishlatiladi.
#
# Token foydalanuvchi tizimga kirgandan so‚Äòng unga biriktiriladi va keyingi barcha so‚Äòrovlarda parol o‚Äòrniga ishlatiladi.
#
# Ya‚Äôni foydalanuvchi login va parolni faqat bir marta yuboradi, keyingi safarlarda Token orqali tizim tanib oladi.
#
# 2Ô∏è‚É£ Nima uchun Token kerak?
#
# HTTP protokoli stateless ‚Äì ya‚Äôni server har bir so‚Äòrovni alohida ko‚Äòradi, foydalanuvchini ‚Äúeslab qolmaydi‚Äù.
#
# Shu sababli foydalanuvchini aniqlash uchun Token ishlatiladi.
#
# Token yordamida:
#
# Parolni har safar yuborish shart bo‚Äòlmaydi.
#
# API xavfsiz bo‚Äòladi.
#
# Mobil ilovalar yoki front-end (React, Vue, Angular) bilan bog‚Äòlash osonlashadi.
#
# 3Ô∏è‚É£ Django REST Framework‚Äôda Token ishlash jarayoni
#
# Foydalanuvchi login qiladi (username + password yuboradi).
#
# Server token yaratadi va uni foydalanuvchiga qaytaradi.
#
# Keyingi barcha API so‚Äòrovlarda foydalanuvchi Authorization header orqali token yuboradi:
#
# Authorization: Token 2f1a53c1abf6a9d2e...
#
#
# Server shu tokenni tekshiradi va foydalanuvchini tanib oladi.
#
# 4Ô∏è‚É£ Token Authentication ishlatish (Django DRF misolida)
# 1. rest_framework.authtoken qo‚Äòshish
#
# settings.py ichiga yozamiz:
#
# INSTALLED_APPS = [
#     ...
#     'rest_framework',
#     'rest_framework.authtoken',
# ]
#
# 2. Migratsiya qilish
# python manage.py migrate
#
# 3. Har bir foydalanuvchi uchun token yaratish
# python manage.py drf_create_token <username>
#
#
# Yoki avtomatik tarzda foydalanuvchi yaratilganda token ham yaratilishi mumkin.
#
# 4. views.py da login endpoint yaratish
# from rest_framework.authtoken.models import Token
# from rest_framework.response import Response
# from rest_framework.views import APIView
# from django.contrib.auth.models import User
# from django.contrib.auth import authenticate
#
# class LoginView(APIView):
#     def post(self, request):
#         username = request.data.get("username")
#         password = request.data.get("password")
#         user = authenticate(username=username, password=password)
#         if user:
#             token, created = Token.objects.get_or_create(user=user)
#             return Response({"token": token.key})
#         return Response({"error": "Noto‚Äòg‚Äòri login yoki parol"}, status=400)
#
# 5. Token bilan so‚Äòrov yuborish (Postman yoki cURL orqali)
# curl -H "Authorization: Token 2f1a53c1abf6a9d2e..." http://127.0.0.1:8000/api/products/
#
# 5Ô∏è‚É£ Token turlari
#
# Simple Token ‚Äì oddiy bir marta yaratiladigan token (rest_framework.authtoken).
#
# JWT (JSON Web Token) ‚Äì eng ko‚Äòp ishlatiladi. 3 qismdan iborat:
#
# Header (algoritm va token turi)
#
# Payload (foydalanuvchi ma‚Äôlumotlari)
#
# Signature (xavfsizlik imzosi)
# JWT foydalanuvchini tezkor va xavfsiz tanib olish uchun ishlatiladi.
#
# OAuth2 Tokens ‚Äì katta tizimlarda (Google, Facebook login) ishlatiladi.
#
# 6Ô∏è‚É£ Hayotiy misol (tushunarli qilib)
#
# Siz supermarket saytida login qildingiz.
#
# Sizga a‚Äôzo kartochka berishadi (bu ‚Äì Token).
#
# Endi siz har safar sotib olishda ismingizni aytib o‚Äòtirmaysiz, shunchaki kartochkani ko‚Äòrsatasiz ‚Äì tizim sizni tanib oladi.
#
# Xuddi shunday, foydalanuvchi API da tokenni yuboradi va server uni tanib oladi.
#
# 7Ô∏è‚É£ Xulosa
#
# Token ‚Äì foydalanuvchini aniqlash uchun maxfiy kalit.
#
# Django REST Framework‚Äôda TokenAuthentication yoki JWT Authentication ishlatiladi.
#
# Token xavfsizlikni oshiradi va API lar bilan ishlashni osonlashtiradi.