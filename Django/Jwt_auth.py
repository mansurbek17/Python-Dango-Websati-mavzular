# üîê JWT Authentication haqida to‚Äòliq ma‚Äôlumot
# 1Ô∏è‚É£ JWT nima?
#
# JWT (JSON Web Token) ‚Äî bu foydalanuvchini aniqlash (authentication) va unga ruxsat berish (authorization) uchun ishlatiladigan tokenlash usuli.
#
# JWT ‚Äî oddiy string, lekin ichida foydalanuvchi haqida kodlangan ma‚Äôlumot bor.
#
# JWT 3 qismdan iborat bo‚Äòladi:
#
# xxxxx.yyyyy.zzzzz
#
#
# Header ‚Üí Token turi va algoritm (masalan: HS256).
#
# Payload ‚Üí Foydalanuvchi haqida ma‚Äôlumot (id, username, role va h.k.).
#
# Signature ‚Üí Token qalbakilashtirilmaganini isbotlovchi maxfiy imzo.
#
# 2Ô∏è‚É£ JWT qanday ishlaydi?
#
# Foydalanuvchi login qiladi (username + password yuboradi).
#
# Server foydalanuvchini tekshiradi va unga JWT token beradi.
#
# Foydalanuvchi keyingi barcha so‚Äòrovlarda HTTP header orqali shu tokenni yuboradi:
#
# Authorization: Bearer <token>
#
#
# Server tokenni tekshiradi:
#
# Agar token yaroqli bo‚Äòlsa ‚Üí foydalanuvchiga ruxsat beradi.
#
# Agar token noto‚Äòg‚Äòri yoki muddati tugagan bo‚Äòlsa ‚Üí xatolik qaytaradi.
#
# 3Ô∏è‚É£ JWT afzalliklari
#
# Stateless ‚Äì server foydalanuvchini sessiyada saqlamaydi, faqat tokenni tekshiradi.
#
# Tezkor ‚Äì chunki token ichida ma‚Äôlumot bo‚Äòladi, qo‚Äòshimcha bazaga murojaat qilish shart emas.
#
# Xavfsiz ‚Äì token imzo bilan himoyalangan, uni qalbakilashtirish qiyin.
#
# Universallik ‚Äì JWT ni mobil ilova, front-end (React, Vue, Angular) va boshqa xizmatlar bilan ishlatish oson.
#
# 4Ô∏è‚É£ Django‚Äôda JWT ishlatish
# 1. Kerakli kutubxonani o‚Äòrnatish
# pip install djangorestframework-simplejwt
#
# 2. settings.py ga qo‚Äòshish
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ),
# }
#
# 3. urls.py da JWT endpointlarni qo‚Äòshish
# from django.urls import path
# from rest_framework_simplejwt.views import (
#     TokenObtainPairView,
#     TokenRefreshView,
# )
#
# urlpatterns = [
#     path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
#     path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
# ]
#
# 4. Login qilib token olish
#
# POST /api/token/
#
# {
#   "username": "admin",
#   "password": "12345"
# }
#
#
# ‚úÖ Javob:
#
# {
#   "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
#   "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
# }
#
# 5Ô∏è‚É£ JWT Token turlari
#
# Access Token
#
# Foydalanuvchini aniqlash uchun ishlatiladi.
#
# Amal qilish vaqti juda qisqa (odatda 5-15 daqiqa).
#
# Har bir API so‚Äòrovida yuboriladi.
#
# Refresh Token
#
# Access token muddati tugaganda yangisini olish uchun ishlatiladi.
#
# Amal qilish muddati uzunroq (odatda 1-7 kun).
#
# Faqat /api/token/refresh/ ga yuboriladi.
#
# üëâ Shu usul xavfsizlikni oshiradi: agar access token o‚Äòg‚Äòirlanib qolsa, u tezda eskiradi.
#
# 6Ô∏è‚É£ JWT ishlash jarayoni (bosqichma-bosqich)
#
# Login: foydalanuvchi login va parol yuboradi.
#
# Token olish: server foydalanuvchiga access va refresh token beradi.
#
# So‚Äòrov yuborish: foydalanuvchi har safar API ga access token yuboradi.
#
# Token tugasa: refresh token orqali yangi access token olinadi.
#
# Logout: refresh tokenni yo‚Äòq qilish orqali chiqib ketiladi.
#
# 7Ô∏è‚É£ Hayotiy misol
#
# Siz universitet kutubxonasiga kirdingiz. Sizga kirish kartasi berishdi:
#
# Access token ‚Äì bir kunga berilgan vaqtinchalik kartochka.
# 
# Refresh token ‚Äì semestr davomida amal qiladigan asosiy a‚Äôzolik hujjati.
#
# Agar vaqtinchalik kartochkangiz tugasa, kutubxonachi sizning a‚Äôzolik hujjatingiz (refresh token) asosida yangisini beradi.
#
# 8Ô∏è‚É£ Xulosa
#
# JWT foydalanuvchini aniqlash uchun eng ko‚Äòp ishlatiladigan tokenlash usuli.
#
# Django‚Äôda djangorestframework-simplejwt orqali ishlatiladi.
#
# Access token ‚Äì qisqa muddatli, tez-tez yangilanadi.
#
# Refresh token ‚Äì uzun muddatli, access tokenni yangilash uchun ishlatiladi.
#
# JWT stateless, xavfsiz va zamonaviy API lar uchun juda qulay.